{
	"name": "Read_and_save_Data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/81c0eba5-b65a-4f50-8c57-6e7e82e459c0/resourceGroups/RG_Databrick_Test/providers/Microsoft.Synapse/workspaces/testsynapsepoc/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://testsynapsepoc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true,
					"tags": [
						"parameters"
					]
				},
				"source": [
					"FilePath = \"Keine Daten vorhanden\"\r\n",
					"FileName = \"Keine Daten vorhanden\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"FilePath = FilePath.replace(\"Daten\",\"\")\r\n",
					"print(FilePath)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.types import StructType,StructField, StringType\r\n",
					"FilePathNoParam = Filepath\r\n",
					"FilePathNoParam = FilePathNoParam.replace(\"synapsecontainter1\",\"\")\r\n",
					"if FileName != \"Keine Daten vorhanden\":\r\n",
					"    df = spark.read.load('abfss://synapsecontainter1@datalalakesynapse1.dfs.core.windows.net/'+ FilePath + FileName, format='csv', \r\n",
					"    header=True, delimiter = \";\")\r\n",
					"else: \r\n",
					"    emptyRDD = spark.sparkContext.emptyRDD()\r\n",
					"    schema = StructType([\r\n",
					"        StructField('NoData', StringType(), True)\r\n",
					"        ])\r\n",
					"    df = spark.createDataFrame(emptyRDD,schema)\r\n",
					"\r\n",
					"display(df)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df.show()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"dept = [(\"FilePath\",FilePath), \r\n",
					"        (\"FileName\",FileName)\r\n",
					"      ]\r\n",
					"\r\n",
					"deptColumns = [\"dept_name\",\"dept_id\"]\r\n",
					"dfTransfer = spark.createDataFrame(data=dept, schema = deptColumns)\r\n",
					"dfTransfer.printSchema()\r\n",
					"dfTransfer.show(truncate=False)\r\n",
					"df.printSchema()\r\n",
					"df.show()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df.createOrReplaceTempView(\"dfTmpView\")\r\n",
					"dfTransfer.createOrReplaceTempView(\"dfTransferView\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"//read in Data to save in Table from TmpView as df\r\n",
					"val scala_df = spark.sqlContext.sql (\"select * from dfTmpView\")\r\n",
					"//read in Filename as df\r\n",
					"val scala_FileNamedf = spark.sqlContext.sql(\"select dept_id from dfTransferView where dept_name = 'FileName' \")\r\n",
					"//save Filename as string\r\n",
					"val scala_FileName = scala_FileNamedf.select(\"dept_id\").first()\r\n",
					"\r\n",
					"try{\r\n",
					"    //try to create a new Table with the given Filename\r\n",
					"    scala_df.write.synapsesql(\"SQLPoolTest.dbo.\"+scala_FileName, Constants.INTERNAL)\r\n",
					"}catch{\r\n",
					"    case e: java.sql.SQLException => println(\"Es gibt bereits eine Tabelle mit dem angegebenen Namen. Bitte nennen Sie die hochzuladene Datei um, oder ändern Löschen Sie die Tabelle im SQL-Pool.\")\r\n",
					"}\r\n",
					"\r\n",
					""
				],
				"execution_count": 19
			}
		]
	}
}